{"version":3,"sources":["components/Challenges/Palindromic.js","App.js","reportWebVitals.js","index.js"],"names":["Palindromic","useState","palindrome","setPalindrome","output","setOutput","style","marginTop","Container","Header","as","Grid","divided","Row","columns","Column","mobile","tablet","computer","marginBottom","Input","placeholder","fluid","value","onChange","event","Button","animated","onClick","length","split","reverse","join","maxLongestString","i","subStringFirstIndex","substring","j","subStringLastIndex","handleCheckPalindromic","Content","visible","hidden","Form","TextArea","rows","Segment","inverted","src","width","height","title","App","console","log","exact","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","Fragment","basename","document","getElementById"],"mappings":"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","file":"static/js/main.ae96150b.chunk.js","sourcesContent":["import React,  {useState} from 'react'\r\nimport { Button, Container, Form, Grid, Header, Input, Segment, TextArea } from 'semantic-ui-react'\r\n\r\nexport default function Palindromic() {\r\n\r\n    // const [palindrome, setPalindrome] = useState('babad')\r\n    // const [input, setInput] = useState('cbbd')\r\n    // const [input, setInput] = useState('askzxcvcxzwe')\r\n    // const [input, setInput] = useState('zxvdsawfqwfcvbnbvcggresdfewegwegergrt')\r\n        \r\n    const [palindrome, setPalindrome] = useState('')\r\n    const [output, setOutput] = useState('')\r\n\r\n\r\n    const handleCheckPalindromic = () => {\r\n        let value = palindrome\r\n\r\n        //Check Palindrome\r\n        if(value.length > 0){\r\n            if (value === value.split('').reverse().join('')) {\r\n                setOutput(value + ' Is Palindrome.')\r\n            }else{\r\n                //If Not Palindrome Find Longest Palindrome Substring\r\n                var maxLongestString = 0;\r\n                setOutput(value + ' Is Not Palindrome.')\r\n    \r\n                for(let i = 0; i < value.length; i++){\r\n                    let subStringFirstIndex = value.substring(i, value.length)\r\n    \r\n                    for(let j = subStringFirstIndex.length; j >= 0; j--){\r\n                        let subStringLastIndex = subStringFirstIndex.substring(0, j)\r\n                        //1 Letter are Pallindrome\r\n                        if(subStringLastIndex.length > 1){\r\n                            if(subStringLastIndex === subStringLastIndex.split('').reverse().join('')){\r\n                                if(subStringLastIndex.length > maxLongestString){\r\n                                    maxLongestString = subStringLastIndex.length\r\n                                    setOutput(`${value + ' Is Not Palindrome.' + '\\nLongest Palindrome is: ' + subStringLastIndex}`) // eslint-disable-line prefer-template\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div style={{ marginTop: '50px' }}>\r\n            <Container>\r\n                <Header as='h1'>Palindromic JavaScript</Header>\r\n                <Grid divided='vertically' style={{ marginTop: '30px' }}>\r\n                    <Grid.Row columns={2}>\r\n                        <Grid.Column mobile={16} tablet={16} computer={8} style={{ marginBottom: '50px' }}>\r\n                            <div>\r\n                                <Header as='h3'>INPUT</Header>\r\n                                <Input \r\n                                    placeholder='type some string' \r\n                                    fluid\r\n                                    value={palindrome}\r\n                                    onChange={(event, {value}) => setPalindrome(value)}\r\n                                />\r\n                            </div>\r\n\r\n                            <div style={{ marginTop: '20px' }}>\r\n                                <Button animated='fade' onClick={()=>handleCheckPalindromic()}>\r\n                                    <Button.Content visible>Submit</Button.Content>\r\n                                    <Button.Content hidden>Submit</Button.Content>\r\n                                </Button>\r\n                            </div>\r\n                            <Header as='h3'>OUTPUT</Header>\r\n                            <Form>\r\n                                <TextArea \r\n                                    placeholder='Result' \r\n                                    rows={2}\r\n                                    value={output}\r\n                                />\r\n                            </Form>\r\n                        </Grid.Column>\r\n                        <Grid.Column mobile={16} tablet={16} computer={8}>\r\n                            <Header as='h3'>CODE SANDBOX</Header>\r\n                            <Segment inverted>\r\n                                <iframe\r\n                                    src='https://codesandbox.io/embed/festive-moon-9d95cv?fontsize=14&hidenavigation=1&theme=dark'\r\n                                    width= '100%'\r\n                                    height= '600px'\r\n                                    title='paalidrome'\r\n                                />\r\n                            </Segment>\r\n                        </Grid.Column>\r\n                    </Grid.Row>\r\n                </Grid>\r\n            </Container>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\n// import { Button, GridColumn, Grid } from 'semantic-ui-react'\r\nimport { Route, Switch } from 'react-router-dom'\r\n// import Timeline from './components/Profile/subpage/Timeline'\r\nimport Palindromic from './components/Challenges/Palindromic'\r\n\r\nexport default function App() {\r\n  \r\n  console.log(\r\n    \"%c⛔️ FBI WARNING!!!\",\r\n    \"color: white;font-family:system-ui;font-size:2rem;-webkit-text-stroke: 0px #F0F8FF;font-weight:bold;background: red; padding: 20px\"\r\n  );\r\n\r\n  return (\r\n    <div>\r\n      <Switch>\r\n        <Route exact path=\"/\" ><Palindromic/></Route>\r\n        <Route path=\"/palindromic\"><Palindromic/></Route>\r\n        {/* <Route><Timeline/></Route> */}\r\n      </Switch>\r\n    </div>\r\n  )\r\n}","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\n// import Palindromic from './components/Challenges/Palindromic';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport 'semantic-ui-css/semantic.min.css';\r\nimport { BrowserRouter } from 'react-router-dom'\r\nimport './css/Profile.css';\r\n\r\nReactDOM.render(\r\n  <React.Fragment>\r\n    <BrowserRouter basename={'/palindromic'}>\r\n      <App/>\r\n    </BrowserRouter>\r\n  </React.Fragment>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}